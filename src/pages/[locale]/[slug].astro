---
import Layout from '../../layouts/MainLayout.astro';
import ConfigReference from '../../components/ConfigReference.astro';
import {getLanguageFromFilename, getSlugFromFilename, DEFAULT_LOCALE, KNOWN_LANGUAGE_CODES} from '../../languages';

export async function getStaticPaths() {
  /**
   * This builds up a set of params using the filename (which is always in english) as the slug,
   * and adds a redirect prop to the proper internationalized slug.
   */
  function getRedirects(allPages) {
    return allPages
      .map(({ astro, url, file, ...page }) => {
        const slug = getSlugFromFilename(file.pathname);
        const locale = getLanguageFromFilename(file.pathname);

        return {
          params: {
            locale,
            slug
          },
          props: {
            locale,
            redirect: `/${locale}/${page.slug}`,
            canonicalSlug: slug,
          }
        }
      })
  }

  /** 
   * Add fallback page content to show if there is not a localized version.
   */
  function getFallbacks(allPages) {
    return allPages
      .filter(p => getLanguageFromFilename(p.file.pathname) === DEFAULT_LOCALE)
      .map(({ astro, url, file, ...page }) => {
        const slug = getSlugFromFilename(file.pathname);
        return KNOWN_LANGUAGE_CODES
          .filter(locale => locale !== DEFAULT_LOCALE)
          .map(locale => ({
          params: {
            locale,
            slug
          },
          props: {
            locale,
            page: {
              ...page,
              canonicalSlug: slug,
              html: astro.html
            }
          }
        }))
      })
      .flat();
  }

  const allPages = Astro.fetchContent('../../data/docs/**/*.md');

  const redirects = getRedirects(allPages);
  const fallbacks = getFallbacks(allPages);

  const paths = allPages.map(({ astro, url, file, ...page }) => {
    const locale = getLanguageFromFilename(file.pathname);
    const canonicalSlug = getSlugFromFilename(file.pathname);
    
    return {
      params: {
        locale: locale,
        slug: page.slug
      },
      props: {
        locale,
        page: {
          ...page,
          canonicalSlug,
          html: astro.html
        }
      }
    }
  })

  return [...paths, ...redirects, ...fallbacks].filter(({ params }) => !!params.slug);
}

const { 
  /** Contains the frontmatter from the page data, including title, summary, etc. */
  page, 
  /** If present, page should redirect to this url.  `page` will be undefined in this case. */
  redirect,
  /** Locale code for current page (e.g. "en") */
  locale,
} = Astro.props

const isConfigRefPage = !redirect && page.canonicalSlug === 'config';

---

{redirect 
  ? <head><meta http-equiv="refresh" content={`0; url=${redirect}`}></head>
  : <Layout content={page}>
      {page.html}
      {isConfigRefPage && <ConfigReference locale={locale}/>}
    </Layout>
}
