---
import ConfigReference from "../../../components/ConfigReference.astro";
import Redirect from "../../../components/Redirect.astro";
import { frontmatter as configRef } from "../../../data/config-reference.md";
import {
  getLanguageFromFilename,
  getSlugFromFilename,
  DEFAULT_LOCALE,
  KNOWN_LANGUAGE_CODES,
} from "../../../languages";
import Layout from "../../../layouts/MainLayout.astro";

export async function getStaticPaths() {
  /**
   * This builds up a set of params using the filename (which is always in english) as the slug,
   * and adds a redirect prop to the proper internationalized slug.
   */
  function getRedirects(allPages) {
    return (
      allPages
        .map(({ file, frontmatter }) => {
          const slug = getSlugFromFilename(file);
          const locale = getLanguageFromFilename(file);

          return {
            params: {
              locale,
              slug,
            },
            props: {
              locale,
              redirect: `/${locale}/${frontmatter.slug}`,
              canonicalSlug: slug,
            },
          };
        })
        // Don't need redirects for the English (default) locale
        .filter((p) => p.params.locale !== DEFAULT_LOCALE)
    );
  }

  function getFallbacks(data) {
    return (
      data
        // Loop over the English (default) locale files
        .filter((p) => getLanguageFromFilename(p.file) === DEFAULT_LOCALE)
        .map(({ frontmatter, ...page }) => {
          const canonicalSlug = getSlugFromFilename(page.file);

          // Create any missing fallbacks
          return KNOWN_LANGUAGE_CODES.filter(
            // limit to non-default locales...
            (locale) =>
              locale !== DEFAULT_LOCALE &&
              // ...which do not already have a file for this slug in this locale
              !data.find(
                (d) =>
                  getLanguageFromFilename(d.file) === locale &&
                  d.file.endsWith(`${canonicalSlug}.md`)
              )
          ).map((locale) => ({
            params: {
              locale,
              slug: canonicalSlug,
            },
            props: {
              locale,
              page: {
                ...frontmatter,
                canonicalSlug,
                ...page,
              },
            },
          }));
        })
        // Flatten array of arrays into a single array
        .flat()
    );
  }

  const allPages = await Astro.glob("../../../data/docs/**/*.md");

  const redirects = getRedirects(allPages);
  const fallbacks = getFallbacks(allPages);

  const paths = allPages.map(({ frontmatter, ...page }) => {
    const locale = getLanguageFromFilename(page.file);
    // This is the English version of the slug
    const canonicalSlug = getSlugFromFilename(page.file);

    return {
      params: {
        locale: locale,
        slug: frontmatter.slug,
      },
      props: {
        locale,
        page: {
          ...frontmatter,
          canonicalSlug,
          ...page,
        },
      },
    };
  });

  // Filter out any paths with an undefined locale or slug.
  return [...paths, ...redirects, ...fallbacks].filter(
    ({ params }) => !!params.locale && !!params.slug
  );
}

const {
  /** Contains the frontmatter from the page data, including title, summary, etc. */
  page,
  /** If present, page should redirect to this url.  `page` will be undefined in this case. */
  redirect,
  /** Locale code for current page (e.g. "en") */
  locale,
} = Astro.props;

let headers;

const isConfigRefPage = !redirect && page.canonicalSlug === "config";

if (isConfigRefPage) {
  // Default locale options, for use as fallback if localization is not available
  const fallbackOptions = configRef[DEFAULT_LOCALE].options;
  // config options for locale
  const configOptions = configRef[locale] ? configRef[locale].options : fallbackOptions;
  const optionHeaders = configOptions.map((option) => ({
    depth: 2,
    slug: option.name,
    text: option.name,
  }));
  headers = optionHeaders;
} else {
  headers = await page.getHeaders();
}
---

{redirect ? (
  <Redirect target={redirect} />
) : (
  <Layout content={page} headers={headers}>
    <page.Content />
    {isConfigRefPage && <ConfigReference locale={locale} />}
  </Layout>
)}
